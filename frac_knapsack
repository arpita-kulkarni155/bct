#include<bits/stdc++.h>
using namespace std;

struct Item{
    int profit;
    int weight;

    //add default constructor
    Item():profit(0),weight(0){};

    Item(int profit,int weight){
        this->profit=profit;
        this->weight=weight;
    }
};

static bool comparison(struct Item a,struct Item b){
    double r1=(double)a.profit/(double)a.weight;
    double r2=(double)b.profit/(double)b.weight;

    return r1>r2;

}

double fractionalKnapsack(int w,struct Item arr[],int N){
    sort(arr,arr+N,comparison);

    double finalvalue=0.0;

    //weight available ->add it completely(items won't overflow)
    for(int i=0;i<N;i++){

        if(arr[i].weight <=w){
            w= w-arr[i].weight;
            finalvalue= finalvalue+arr[i].profit;

        }

        //add fractional value of weight
        else{
            finalvalue=finalvalue+arr[i].profit*((double)w/(double)arr[i].weight);

            break;
        }
    }
    return finalvalue;
 
}

int main(){
    int W,N;

    cout<<"Enter weight capacity of knapsack:";
    cin>>W;

    cout<<"Enter the no items: ";
    cin>>N;

    //dynamically memory allocate

    Item* arr=new Item[N];

    for(int i =0;i<N;i++){

        int weight,profit;
        cout<<"Enter profit and weight of Item"<<i+1<<" : ";
        cin>>profit>>weight;

        arr[i]=Item(profit,weight);

    }

    //function call

    int maxprofit=fractionalKnapsack(W,arr,N);

    cout<<"maximun profit achievable is:"<<maxprofit;

    //delete free memory 
    delete[] arr;

}

//w=50
(60,10)
(100,20)
(120,30)

